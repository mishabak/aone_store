<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

<form style="margin-top: 88px;" class="container" action="/admin/edit-product" method="POST"
    enctype="multipart/form-data">

    <div style="padding-top: 53px;padding-bottom: 39px; border-radius: 11px;" class="container bg-light">
        <div class="row">
            <div class="col-12 col-lg-6">
                <input style="display: none;" name="Id" type="text" value="{{product._id}}">
                <div><input class="form-control" name="Name" type="text" placeholder="PRODUCT NAME"
                        value="{{product.Name}}"> <br></div>
                <div class="row">
                    <div class="col-6"> <input class="form-control" type="text" name="Quantity" placeholder="QUANTITY"
                            value="{{product.Quantity}}"> <br></div>
                    <div class="col-6"> <input class="form-control" type="number" name="Price" placeholder="PRICE"
                            value="{{product.Price}}"> <br> </div>
                </div>
                <div class="row">
                    <div class="col-6">

                   
                    <label for="">CHOOSE CATEGORY</label>
                    <div class="form-group ">
                        <select name="Category" class="form-control">
                            {{#each category}}
                            <option>{{Category}}</option>
                            {{/each}}
                        </select>
                    </div>
                     </div>
                    <div class="col-6">
                        
                   
                    <label for="">CHOOSE BRAND</label>

                    <div class="form-group ">
                        <select name="Brand" class="form-control">
                            <option value=""></option>
                            {{#each brand}}
                            <option>{{Brand}}</option>
                            {{/each}}

                        </select>
                    </div>
                     </div>
                </div>



                <br>

                <label for="">CHOOSE IMAGES</label>
                <div class="row">
                    <div class="col-12 col-md-6">
                        <div id="editProduct1">
                            <label for="">IMAGE_1</label>
                            <img width="100px" height="100px" src="/productImage/{{product._id}}1.jpg">
                        </div>
                        <div id="img1" style="display: none;">
                            <label style="float: left; margin-top: 35px;" for="">IMAGE_1</label>
                            <div style="    width: 100px; height: 100px;overflow: hidden; " class="preview1 "></div>
                        </div>
                        <input type="file" name="Image1" id="image1" class="form-control"
                            onchange="return filevalidation1()">
                        <br>

                        <div id="editProduct2">
                            <label for="">IMAGE_2</label>
                            <img style=" width: 100px; height: 100px;" src="/productImage/{{product._id}}2.jpg">
                        </div>
                        <div id="img2" style="display: none;">
                            <label style="float: left; margin-top: 35px;" for="">IMAGE_2</label>

                            <div style="   width: 100px; height: 100px;overflow: hidden; " class="preview2 "></div>
                        </div>
                        <input type="file" name="Image2" id="image2" class="form-control" onchange="filevalidation2()">
                        <br>

                    </div>
                    <div class="col-12 col-md-6">
                        <div id="editProduct3">
                            <label for="">IMAGE_3</label>
                            <img width="100px" height="100px" src="/productImage/{{product._id}}3.jpg">
                        </div>
                        <div id="img3" style="display: none;">
                            <label style="float: left; margin-top: 35px;" for="">IMAGE_3</label>
                            <div style="  width: 100px; height: 100px;overflow: hidden; " class="preview3 "></div>
                        </div>
                        <input type="file" name="Image3" id="image3" class="form-control" onchange="filevalidation3()">
                        <br>

                        <div id="editProduct4">
                            <label for="">IMAGE_4</label>
                            <img width="100px" height="100px" src="/productImage/{{product._id}}4.jpg">
                        </div>
                        <div id="img4" style="display: none;">
                            <label style="float: left; margin-top: 35px;" for="">IMAGE_4</label>
                            <div style=" width: 100px; height: 100px;overflow: hidden; " class="preview4 "></div>
                        </div>
                        <input type="file" name="Image4" id="image4" class="form-control" onchange="filevalidation4()">
                        <br>

                    </div>
                </div>
                <button style="background: #525252;" class="btn " id="add" type="submit">Save change</button>

            </div>
            <div style="display: flex;align-items: baseline; flex-direction: column; " class="col-12 col-lg-6">
           
                <div style="width: 100%;" id="image-box"></div>
                <div class="col-4"> <button id="crop-btn" style="background: #525252; display: none; float: left;"
        class="btn ">Crop</button></div>
            </div>
           

        </div>
    </div>


</form>
<div class="col-4"> <button id="crop-btn" style="background: #525252; display: none; float: left;"
        class="btn ">Crop</button></div>


<script>
    function filevalidation1() {
        var fileInput =
            document.getElementById('image1');
        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg)$/i;
        if (!allowedExtensions.exec(filePath)) {
            alert('Please choose an jpg image file');
            fileInput.value = '';
            return false;
        }
        else {
            // image-box is the id of the div element that will store our cropping image preview
            const imagebox = document.getElementById('image-box')
            // crop-btn is the id of button that will trigger the event of change original file with cropped file.
            const crop_btn = document.getElementById('crop-btn')
            // id_image is the id of the input tag where we will upload the image
            const input = document.getElementById('image1')

            document.getElementById('img1').style.display = 'block'
            document.getElementById('editProduct1').style.display = 'none'
            var filePath = input.value;
            // Getting image file object from the input variable
            const img_data = input.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('add').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 18 / 16,
                preview: '.preview1',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered

            crop_btn.addEventListener('click', () => {


                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {


                    // Gets the original image data
                    let fileInputElement = document.getElementById('image1');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;

                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('add').style.display = 'block'

                });
            })


        }
    }

    // image 2 crop --->>


    function filevalidation2() {
        var fileInput =
            document.getElementById('image2');
        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg)$/i;
        if (!allowedExtensions.exec(filePath)) {
            alert('Please choose an jpg image file');
            fileInput.value = '';
            return false;
        }
        else {
            // image-box is the id of the div element that will store our cropping image preview
            const imagebox = document.getElementById('image-box')
            // crop-btn is the id of button that will trigger the event of change original file with cropped file.
            const crop_btn = document.getElementById('crop-btn')
            // id_image is the id of the input tag where we will upload the image
            const input = document.getElementById('image2')
            document.getElementById('img2').style.display = 'block'
            document.getElementById('editProduct2').style.display = 'none'
            var filePath = input.value;
            // Getting image file object from the input variable
            const img_data = input.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('add').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 18 / 16,
                preview: '.preview2',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered

            crop_btn.addEventListener('click', () => {


                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {


                    // Gets the original image data
                    let fileInputElement = document.getElementById('image2');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;

                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('add').style.display = 'block'

                });
            })


        }
    }

    //  image 3 crop ----->>

    function filevalidation3() {
        var fileInput =
            document.getElementById('image3');
        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg)$/i;
        if (!allowedExtensions.exec(filePath)) {
            alert('Please choose an jpg image file');
            fileInput.value = '';
            return false;
        }
        else {
            // image-box is the id of the div element that will store our cropping image preview
            const imagebox = document.getElementById('image-box')
            // crop-btn is the id of button that will trigger the event of change original file with cropped file.
            const crop_btn = document.getElementById('crop-btn')
            //image3 is the id of the input tag where we will upload the image
            const input = document.getElementById('image3')

            // img3 for show image preview onchange action 

            document.getElementById('img3').style.display = 'block'
            document.getElementById('editProduct3').style.display = 'none'
            var filePath = input.value;
            // Getting image file object from the input variable
            const img_data = input.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('add').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 18 / 16,
                preview: '.preview3',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered

            crop_btn.addEventListener('click', () => {


                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {


                    // Gets the original image data
                    let fileInputElement = document.getElementById('image3');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;

                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('add').style.display = 'block'

                });
            })


        }
    }



    // image 4 crop -->



    function filevalidation4() {
        var fileInput =
            document.getElementById('image4');
        var filePath = fileInput.value;

        // Allowing file type
        var allowedExtensions =
            /(\.jpg)$/i;
        if (!allowedExtensions.exec(filePath)) {
            alert('Please choose an jpg image file');
            fileInput.value = '';
            return false;
        }
        else {
            // image-box is the id of the div element that will store our cropping image preview
            const imagebox = document.getElementById('image-box')
            // crop-btn is the id of button that will trigger the event of change original file with cropped file.
            const crop_btn = document.getElementById('crop-btn')
            // id_image is the id of the input tag where we will upload the image
            const input = document.getElementById('image4')
            document.getElementById('img4').style.display = 'block'
            document.getElementById('editProduct4').style.display = 'none'
            var filePath = input.value;
            // Getting image file object from the input variable
            const img_data = input.files[0]
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            const url = URL.createObjectURL(img_data)

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
            imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

            // Storing that cropping view image in a variable
            const image = document.getElementById('image')

            // Displaying the image box
            document.getElementById('image-box').style.display = 'block'
            // Displaying the Crop buttton
            document.getElementById('crop-btn').style.display = 'block'
            // Hiding the Post button
            document.getElementById('add').style.display = 'none'

            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                aspectRatio: 18 / 16,
                preview: '.preview4',
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
            })

            // When crop button is clicked this event will get triggered

            crop_btn.addEventListener('click', () => {


                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {


                    // Gets the original image data
                    let fileInputElement = document.getElementById('image4');
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    let container = new DataTransfer();
                    // Add the cropped image file to the container
                    container.items.add(file);
                    // Replace the original image file with the new cropped image file
                    fileInputElement.files = container.files;

                    // Hide the cropper box
                    document.getElementById('image-box').style.display = 'none'
                    // Hide the crop button
                    document.getElementById('crop-btn').style.display = 'none'
                    // Display the Post button
                    document.getElementById('add').style.display = 'block'

                });
            })


        }
    }



</script>